import java_cup.runtime.*;

/* 
=> parser code {: ... :}:
   Permite incluir um método main() diretamente dentro da 
   classe do analisador sintático, dispensando a criação de 
   uma classe principal (Main) com o método main().

   O próprio analisador sintático será responsável por iniciar 
   a execução.
*/
parser code {:
  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }
:}

terminal Integer INTEIRO;
terminal MAIS, MENOS, MULT, DIV, RESTO, POW, MENOSUNARIO, PTVIRG, PARENTESQ, PARENTDIR;

non terminal inicio;
non terminal Integer expr;

precedence left MAIS, MENOS, MULT, DIV, RESTO;
precedence right MENOSUNARIO, POW; // Menos unário com maior precedência, associatividade à direita.

start with inicio;

inicio ::= expr:e PTVIRG {: System.out.println(e); :}
         ;

expr ::= expr:a MAIS expr:b             {: RESULT = a.intValue() + b.intValue(); :}
       | expr:a MENOS expr:b            {: RESULT = a.intValue() - b.intValue(); :}
       | MENOS expr:a                   {: RESULT = -a; :} %prec MENOSUNARIO  
       | expr:a MULT expr:b  {: RESULT = a.intValue() * b.intValue(); :}
       | expr:a DIV expr:b  {: RESULT = a.intValue() / b.intValue(); :}
       | expr:a RESTO expr:b  {: RESULT = a.intValue() % b.intValue(); :}
       | expr:a POW expr:b  {: 
           RESULT = new Integer((int) Math.pow(a.intValue(), b.intValue()));
        :}         
       | PARENTESQ expr:a PARENTDIR     {: RESULT = a.intValue(); :}
       | INTEIRO:a                      {: RESULT = a.intValue(); :}
       ;

/*
Usar %prec:
  É importante quando um mesmo token tem dois significados 
  diferentes (como o - unário e binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática e a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/